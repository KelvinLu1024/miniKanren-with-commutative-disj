## Towards a miniKanren with fair search strategies

(KC: I finish it in 20 minutes)

Hello everyone, I am Kuang-Chen, from Indiana University. It is my pleasure to 
be here, the first miniKanren workshop. I am going to talk about our paper,
"Towards a miniKanren with fair search strategies."

(If there are any questions, please feel free to ask.)

## Where to start?


miniKanren is a family of programming languages.  Our research is 
done with the miniKanren in this little yellow-green book, TRS2. We chose 
the book because it was my first introduction to miniKanren.


## What is fairness?

(Perhaps there is something about in fair in operating sytems
 that could be stated, if nothing else, there are all kinds of
 fairness, our particular is tied to ordering processes)

So, what is fairness in miniKanren?

We think there are two aspects of fairness:

* fairness in disjunction, and

* fairness in conjunction

Elaborate those levels of fairness.

An implementation of disjunction can be 

  unfair, 

  almost-fair, 

  or fair.

An implementation of conjunction can be 

  unfair

  or fair.


We will discuss these later. After showing some example programs.


## Examples

Our examples are about running this relation, repeato.
repeato relates `x' with `l', where `l' is a list of one or more `x's.

(next slide)

For example, in this query, we ask for 3 qs such that each q is a list of one 
or more lambdas. miniKanren gives us three answers: a list of one lambda, a
a list of two lambdas, and a list of three lambdas.



## Fairness in Disjunctions

Sometimes we want lists of things other than lambdas.
Here we ask for 9 qs such that each q is either a list of lambdas, or a list of 
lambs. Here we have two kinds of lambs: grey lambs and white lambs.

(next slide)

The search strategy in the little yellow-green book gives many more lambdas 
than lambs.  This is because the disjunction of this search strategy 
is unfair.

We use the word ``disjunction'' because conde relates its lines
disjunctively.  

To put this another way, these three uses of repeato
are conceptually related by logical OR.

(next slide)

Let's ask the same question to a miniKanren with almost-fair disjunction.  This 
time we get many more white lambs than other things.  The result might look 
similar to the unfair one.  As the number of lines increases, however, 
things will change. 

## Compare fair and almost-fair

Here are two new conde-lines: one for cats and one for dogs.  With
these two additional lines, the search strategy in the little
yellow-green book still gives us many lambdas.


We can imagine when there are many lines in the same conde, 
the last few lines are hardly explored.  


So miniKanren programmers sometimes need to be very careful about how
to order their conde lines.

(next slide)

In contrast, the strategy with almost-fair disjunction would give us 
more lists of lambs and lists of cats, and fewer lists of lambdas and lists 
of dogs.   (Explain why we have so few lmabdas.) (15 was chosen to point
another convention in slide 9.)

There is a pattern in the answer list. The first four answers are white lamb, 
grey lamb, cat, and lambda.  The next four answers are, again, white lamb, 
grey lamb, cat, and ... dog!  And the next four answers repeat the pattern.
So the last answer in the third line is a list of two lambdas. If we ask for 
one more answer, it would be a list of two dogs.

Almost-fair disjunctions guarantee that the maximal ratio of computational 
resources spent in each conde-line is bounded by a constant, no matter how many 
lines there are. The constant for our strategy is 2.



## Fairness in Disjunctions (again)

Strategies with fair disjunctions provide an even stronger guarantee. That is 
resources are allocated evenly to every conde-line in the same conde. 
Thus, the answers appear in a more easily grokked order.



## (Search) Space

Before explaining fairness in conjunctions, we introduce spaces.
They are like streams.  All of our strategies share the same
Space structure.  But we reformulate space representation in one of the
search strategies to improve execution time.  This representation, however,
produces the same values in the same order.  So it is fine to focus on that
representation.  A space is either the empty list, a suspension, or a
pair of a state and a space.

(next slides)

We visualize spaces like these examples.

In the first diagram, the space starts with a state -- 
Each state is represented using a square.

The state is 
followed by a gray rectangle, which means everything after it is in a 
suspension.  Within the suspension, there are two more states followed by
a black rectangle. The black rectangle represents the empty list and 
terminates the space.

The second diagram shows a possibly infinite space. Although spaces can be 
infinitely large, the number of squares between any two gray rectangles is 
always finite.



## Fairness in Conjunctions

Now let's talk about fairness in conjunction.

Fairness in conjunctions is a bit different from fairness in disjunctions.  
When we consider fairness in disjunctions, we are looking for fair multi-arity 
disjunction because conde can have multiple lines.  In the case of 
conjunctions, however, we only care about binary conjunction.

(next slide)

A binary conjunction has two relations to satisfy.
In the left side of the diagram, the space displayed vertically is the result 
of satisfying the first conjunct. We 
want each state to also satisfy the second conjunct. So we have more spaces
to the right. Each horizontal space corresponds to a state in the vertical
space. Every state in the horizontal spaces satisfies both 
relations, thus they comprise a solution to this conjunction.

The key point of fair conjunction is to combine horizontal spaces of the same 
color fairly.  This part is the same as how we implementation fair disjunction.



## Search Strategies

Here are all 4 search strategies we analyzed. 
Interleaving DFS is the search strategy in the little yellow-green book.
Balanced interleaving DFS and fair DFS are new.

We give a new implementation of BFS.
Ours is shorter and more efficient than the one presented in "Algebra of Logic 
Programming" in the dissertation of Silvja Seres.



## Why fairness?

But... why do we want fairness?

We have three reasons.

First, as we have seen in the repeato examples, fair strategies can 
sometimes generate answers in a more understandable order.

Second, the performance of search strategies with fair or almost-fair  
disjunction is more resistant to playing the game of permuting conde lines.

It follows that beginners need not be concerned about conde-line order.

And miniKanren programmers sometimes run a relation in several modes.
But the optimal orders for each mode can be different.  Then, fair
strategies allow using one definition for different running modes while having 
more acceptable performance.

## Q & A

That's all. Thanks!




(*

When you don't know how to answer a question ...
    "Let's take that discussion offline."
*)
